AORB_5:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => start * 0
AORB_6:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => start / 0
AORB_7:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => start % 0
AORB_8:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => start - 0
AORB_9:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i * 1
AORB_10:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i / 1
AORB_11:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i % 1
AORB_12:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i + 1
AORB_13:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i * 1
AORB_14:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i / 1
AORB_15:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i % 1
AORB_16:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i + 1
AORB_17:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => count[i - 1] * offset[i - 1]
AORB_18:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => count[i - 1] / offset[i - 1]
AORB_19:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => count[i - 1] % offset[i - 1]
AORB_20:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => count[i - 1] - offset[i - 1]
AORB_21:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => i * 1
AORB_22:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => i / 1
AORB_23:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => i % 1
AORB_24:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => i + 1
AORB_25:62:void_sort(java.lang.Integer[],int,int,int):end - begin => end * begin
AORB_26:62:void_sort(java.lang.Integer[],int,int,int):end - begin => end / begin
AORB_27:62:void_sort(java.lang.Integer[],int,int,int):end - begin => end % begin
AORB_28:62:void_sort(java.lang.Integer[],int,int,int):end - begin => end + begin
AORB_29:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => divisor * 10
AORB_30:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => divisor % 10
AORB_31:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => divisor + 10
AORB_32:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => divisor - 10
AORS_2:32:void_sort(java.lang.Integer[],int,int,int):i++ => i--
AORS_3:35:void_sort(java.lang.Integer[],int,int,int):count[digit]++ => count[digit]--
AORS_4:38:void_sort(java.lang.Integer[],int,int,int):i++ => i--
AORS_5:41:void_sort(java.lang.Integer[],int,int,int):b++ => b--
AORS_6:49:void_sort(java.lang.Integer[],int,int,int):offset[digit]++ => offset[digit]--
AORS_7:50:void_sort(java.lang.Integer[],int,int,int):count[digit]-- => count[digit]++
AORS_8:59:void_sort(java.lang.Integer[],int,int,int):i++ => i--
AODU_1:46:void_sort(java.lang.Integer[],int,int,int):-1 => 1
AODS_1:35:void_sort(java.lang.Integer[],int,int,int):count[digit]++ => count[digit]
AODS_2:49:void_sort(java.lang.Integer[],int,int,int):offset[digit]++ => offset[digit]
AODS_3:50:void_sort(java.lang.Integer[],int,int,int):count[digit]-- => count[digit]
AOIU_3:29:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => -NUMBER_OF_BUCKETS
AOIU_4:30:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => -NUMBER_OF_BUCKETS
AOIU_5:33:void_sort(java.lang.Integer[],int,int,int):i => -i
AOIU_6:34:void_sort(java.lang.Integer[],int,int,int):d => -d
AOIU_7:34:void_sort(java.lang.Integer[],int,int,int):divisor => -divisor
AOIU_8:37:void_sort(java.lang.Integer[],int,int,int):start => -start
AOIU_9:39:void_sort(java.lang.Integer[],int,int,int):i => -i
AOIU_10:43:void_sort(java.lang.Integer[],int,int,int):b => -b
AOIU_11:44:void_sort(java.lang.Integer[],int,int,int):origin => -origin
AOIU_12:45:void_sort(java.lang.Integer[],int,int,int):from => -from
AOIU_13:48:void_sort(java.lang.Integer[],int,int,int):num => -num
AOIU_14:48:void_sort(java.lang.Integer[],int,int,int):divisor => -divisor
AOIU_15:51:void_sort(java.lang.Integer[],int,int,int):to => -to
AOIU_16:52:void_sort(java.lang.Integer[],int,int,int):num => -num
AOIU_17:53:void_sort(java.lang.Integer[],int,int,int):temp => -temp
AOIU_18:54:void_sort(java.lang.Integer[],int,int,int):to => -to
AOIU_19:60:void_sort(java.lang.Integer[],int,int,int):i => -i
AOIU_20:60:void_sort(java.lang.Integer[],int,int,int):start => -start
AOIU_21:61:void_sort(java.lang.Integer[],int,int,int):i => -i
AOIU_22:63:void_sort(java.lang.Integer[],int,int,int):begin => -begin
AOIU_23:63:void_sort(java.lang.Integer[],int,int,int):end => -end
AOIU_24:63:void_sort(java.lang.Integer[],int,int,int):divisor => -divisor
AOIS_13:29:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS++
AOIS_14:29:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS--
AOIS_15:30:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS++
AOIS_16:30:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS--
AOIS_17:32:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_18:32:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_19:32:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_20:32:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_21:32:void_sort(java.lang.Integer[],int,int,int):length => ++length
AOIS_22:32:void_sort(java.lang.Integer[],int,int,int):length => --length
AOIS_23:32:void_sort(java.lang.Integer[],int,int,int):length => length++
AOIS_24:32:void_sort(java.lang.Integer[],int,int,int):length => length--
AOIS_25:33:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_26:33:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_27:34:void_sort(java.lang.Integer[],int,int,int):d => ++d
AOIS_28:34:void_sort(java.lang.Integer[],int,int,int):d => --d
AOIS_29:34:void_sort(java.lang.Integer[],int,int,int):d => d++
AOIS_30:34:void_sort(java.lang.Integer[],int,int,int):d => d--
AOIS_31:34:void_sort(java.lang.Integer[],int,int,int):divisor => ++divisor
AOIS_32:34:void_sort(java.lang.Integer[],int,int,int):divisor => --divisor
AOIS_33:34:void_sort(java.lang.Integer[],int,int,int):divisor => divisor++
AOIS_34:34:void_sort(java.lang.Integer[],int,int,int):divisor => divisor--
AOIS_35:37:void_sort(java.lang.Integer[],int,int,int):start => ++start
AOIS_36:37:void_sort(java.lang.Integer[],int,int,int):start => --start
AOIS_37:37:void_sort(java.lang.Integer[],int,int,int):start => start++
AOIS_38:37:void_sort(java.lang.Integer[],int,int,int):start => start--
AOIS_39:38:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_40:38:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_41:38:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_42:38:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_43:38:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ++NUMBER_OF_BUCKETS
AOIS_44:38:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => --NUMBER_OF_BUCKETS
AOIS_45:38:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS++
AOIS_46:38:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS--
AOIS_47:39:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_48:39:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_49:39:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_50:39:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_51:39:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_52:39:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_53:39:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_54:39:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_55:41:void_sort(java.lang.Integer[],int,int,int):b => ++b
AOIS_56:41:void_sort(java.lang.Integer[],int,int,int):b => --b
AOIS_57:41:void_sort(java.lang.Integer[],int,int,int):b => b++
AOIS_58:41:void_sort(java.lang.Integer[],int,int,int):b => b--
AOIS_59:41:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ++NUMBER_OF_BUCKETS
AOIS_60:41:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => --NUMBER_OF_BUCKETS
AOIS_61:41:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS++
AOIS_62:41:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS--
AOIS_63:42:void_sort(java.lang.Integer[],int,int,int):b => ++b
AOIS_64:42:void_sort(java.lang.Integer[],int,int,int):b => --b
AOIS_65:42:void_sort(java.lang.Integer[],int,int,int):b => b++
AOIS_66:42:void_sort(java.lang.Integer[],int,int,int):b => b--
AOIS_67:43:void_sort(java.lang.Integer[],int,int,int):b => b++
AOIS_68:43:void_sort(java.lang.Integer[],int,int,int):b => b--
AOIS_69:44:void_sort(java.lang.Integer[],int,int,int):origin => origin++
AOIS_70:44:void_sort(java.lang.Integer[],int,int,int):origin => origin--
AOIS_71:45:void_sort(java.lang.Integer[],int,int,int):from => from++
AOIS_72:45:void_sort(java.lang.Integer[],int,int,int):from => from--
AOIS_73:48:void_sort(java.lang.Integer[],int,int,int):num => ++num
AOIS_74:48:void_sort(java.lang.Integer[],int,int,int):num => --num
AOIS_75:48:void_sort(java.lang.Integer[],int,int,int):num => num++
AOIS_76:48:void_sort(java.lang.Integer[],int,int,int):num => num--
AOIS_77:48:void_sort(java.lang.Integer[],int,int,int):divisor => ++divisor
AOIS_78:48:void_sort(java.lang.Integer[],int,int,int):divisor => --divisor
AOIS_79:48:void_sort(java.lang.Integer[],int,int,int):divisor => divisor++
AOIS_80:48:void_sort(java.lang.Integer[],int,int,int):divisor => divisor--
AOIS_81:51:void_sort(java.lang.Integer[],int,int,int):to => to++
AOIS_82:51:void_sort(java.lang.Integer[],int,int,int):to => to--
AOIS_83:52:void_sort(java.lang.Integer[],int,int,int):num => ++num
AOIS_84:52:void_sort(java.lang.Integer[],int,int,int):num => --num
AOIS_85:52:void_sort(java.lang.Integer[],int,int,int):num => num++
AOIS_86:52:void_sort(java.lang.Integer[],int,int,int):num => num--
AOIS_87:53:void_sort(java.lang.Integer[],int,int,int):temp => ++temp
AOIS_88:53:void_sort(java.lang.Integer[],int,int,int):temp => --temp
AOIS_89:53:void_sort(java.lang.Integer[],int,int,int):temp => temp++
AOIS_90:53:void_sort(java.lang.Integer[],int,int,int):temp => temp--
AOIS_91:54:void_sort(java.lang.Integer[],int,int,int):to => ++to
AOIS_92:54:void_sort(java.lang.Integer[],int,int,int):to => --to
AOIS_93:54:void_sort(java.lang.Integer[],int,int,int):to => to++
AOIS_94:54:void_sort(java.lang.Integer[],int,int,int):to => to--
AOIS_95:55:void_sort(java.lang.Integer[],int,int,int):from => ++from
AOIS_96:55:void_sort(java.lang.Integer[],int,int,int):from => --from
AOIS_97:55:void_sort(java.lang.Integer[],int,int,int):from => from++
AOIS_98:55:void_sort(java.lang.Integer[],int,int,int):from => from--
AOIS_99:55:void_sort(java.lang.Integer[],int,int,int):origin => ++origin
AOIS_100:55:void_sort(java.lang.Integer[],int,int,int):origin => --origin
AOIS_101:55:void_sort(java.lang.Integer[],int,int,int):origin => origin++
AOIS_102:55:void_sort(java.lang.Integer[],int,int,int):origin => origin--
AOIS_103:58:void_sort(java.lang.Integer[],int,int,int):divisor => ++divisor
AOIS_104:58:void_sort(java.lang.Integer[],int,int,int):divisor => --divisor
AOIS_105:58:void_sort(java.lang.Integer[],int,int,int):divisor => divisor++
AOIS_106:58:void_sort(java.lang.Integer[],int,int,int):divisor => divisor--
AOIS_107:59:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_108:59:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_109:59:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_110:59:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_111:59:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ++NUMBER_OF_BUCKETS
AOIS_112:59:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => --NUMBER_OF_BUCKETS
AOIS_113:59:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS++
AOIS_114:59:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS--
AOIS_115:60:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_116:60:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_117:60:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_118:60:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_119:60:void_sort(java.lang.Integer[],int,int,int):i => ++i
AOIS_120:60:void_sort(java.lang.Integer[],int,int,int):i => --i
AOIS_121:60:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_122:60:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_123:60:void_sort(java.lang.Integer[],int,int,int):start => start++
AOIS_124:60:void_sort(java.lang.Integer[],int,int,int):start => start--
AOIS_125:61:void_sort(java.lang.Integer[],int,int,int):i => i++
AOIS_126:61:void_sort(java.lang.Integer[],int,int,int):i => i--
AOIS_127:62:void_sort(java.lang.Integer[],int,int,int):end => ++end
AOIS_128:62:void_sort(java.lang.Integer[],int,int,int):end => --end
AOIS_129:62:void_sort(java.lang.Integer[],int,int,int):end => end++
AOIS_130:62:void_sort(java.lang.Integer[],int,int,int):end => end--
AOIS_131:62:void_sort(java.lang.Integer[],int,int,int):begin => ++begin
AOIS_132:62:void_sort(java.lang.Integer[],int,int,int):begin => --begin
AOIS_133:62:void_sort(java.lang.Integer[],int,int,int):begin => begin++
AOIS_134:62:void_sort(java.lang.Integer[],int,int,int):begin => begin--
AOIS_135:63:void_sort(java.lang.Integer[],int,int,int):begin => begin++
AOIS_136:63:void_sort(java.lang.Integer[],int,int,int):begin => begin--
AOIS_137:63:void_sort(java.lang.Integer[],int,int,int):end => end++
AOIS_138:63:void_sort(java.lang.Integer[],int,int,int):end => end--
AOIS_139:63:void_sort(java.lang.Integer[],int,int,int):divisor => ++divisor
AOIS_140:63:void_sort(java.lang.Integer[],int,int,int):divisor => --divisor
AOIS_141:63:void_sort(java.lang.Integer[],int,int,int):divisor => divisor++
AOIS_142:63:void_sort(java.lang.Integer[],int,int,int):divisor => divisor--
ROR_8:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   i > length
ROR_9:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   i >= length
ROR_10:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   i <= length
ROR_11:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   i == length
ROR_12:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   i != length
ROR_13:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   true
ROR_14:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>   false
ROR_15:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i > NUMBER_OF_BUCKETS
ROR_16:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i >= NUMBER_OF_BUCKETS
ROR_17:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i <= NUMBER_OF_BUCKETS
ROR_18:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i == NUMBER_OF_BUCKETS
ROR_19:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i != NUMBER_OF_BUCKETS
ROR_20:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   true
ROR_21:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   false
ROR_22:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   b > NUMBER_OF_BUCKETS
ROR_23:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   b >= NUMBER_OF_BUCKETS
ROR_24:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   b <= NUMBER_OF_BUCKETS
ROR_25:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   b == NUMBER_OF_BUCKETS
ROR_26:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   b != NUMBER_OF_BUCKETS
ROR_27:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   true
ROR_28:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>   false
ROR_29:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   count[b] >= 0
ROR_30:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   count[b] < 0
ROR_31:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   count[b] <= 0
ROR_32:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   count[b] == 0
ROR_33:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   count[b] != 0
ROR_34:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   true
ROR_35:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>   false
ROR_36:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   from > origin
ROR_37:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   from >= origin
ROR_38:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   from < origin
ROR_39:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   from <= origin
ROR_40:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   from == origin
ROR_41:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   true
ROR_42:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>   false
ROR_43:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   divisor >= 1
ROR_44:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   divisor < 1
ROR_45:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   divisor <= 1
ROR_46:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   divisor == 1
ROR_47:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   divisor != 1
ROR_48:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   true
ROR_49:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>   false
ROR_50:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i > NUMBER_OF_BUCKETS
ROR_51:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i >= NUMBER_OF_BUCKETS
ROR_52:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i <= NUMBER_OF_BUCKETS
ROR_53:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i == NUMBER_OF_BUCKETS
ROR_54:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   i != NUMBER_OF_BUCKETS
ROR_55:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   true
ROR_56:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>   false
ROR_57:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   i >= 0
ROR_58:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   i < 0
ROR_59:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   i <= 0
ROR_60:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   i == 0
ROR_61:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   i != 0
ROR_62:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   true
ROR_63:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>   false
ROR_64:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   end - begin >= 1
ROR_65:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   end - begin < 1
ROR_66:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   end - begin <= 1
ROR_67:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   end - begin == 1
ROR_68:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   end - begin != 1
ROR_69:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   true
ROR_70:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>   false
COI_2:32:void_sort(java.lang.Integer[],int,int,int): i < length  =>  !(i < length)
COI_3:38:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>  !(i < NUMBER_OF_BUCKETS)
COI_4:41:void_sort(java.lang.Integer[],int,int,int): b < NUMBER_OF_BUCKETS  =>  !(b < NUMBER_OF_BUCKETS)
COI_5:42:void_sort(java.lang.Integer[],int,int,int): count[b] > 0  =>  !(count[b] > 0)
COI_6:55:void_sort(java.lang.Integer[],int,int,int): from != origin  =>  !(from != origin)
COI_7:58:void_sort(java.lang.Integer[],int,int,int): divisor > 1  =>  !(divisor > 1)
COI_8:59:void_sort(java.lang.Integer[],int,int,int): i < NUMBER_OF_BUCKETS  =>  !(i < NUMBER_OF_BUCKETS)
COI_9:60:void_sort(java.lang.Integer[],int,int,int): i > 0  =>  !(i > 0)
COI_10:62:void_sort(java.lang.Integer[],int,int,int): end - begin > 1  =>  !(end - begin > 1)
LOI_6:29:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ~NUMBER_OF_BUCKETS
LOI_7:30:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ~NUMBER_OF_BUCKETS
LOI_8:32:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_9:32:void_sort(java.lang.Integer[],int,int,int):length => ~length
LOI_10:32:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_11:33:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_12:34:void_sort(java.lang.Integer[],int,int,int):d => ~d
LOI_13:34:void_sort(java.lang.Integer[],int,int,int):divisor => ~divisor
LOI_14:35:void_sort(java.lang.Integer[],int,int,int):digit => ~digit
LOI_15:37:void_sort(java.lang.Integer[],int,int,int):start => ~start
LOI_16:38:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_17:38:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ~NUMBER_OF_BUCKETS
LOI_18:38:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_19:39:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_20:39:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_21:39:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_22:41:void_sort(java.lang.Integer[],int,int,int):b => ~b
LOI_23:41:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ~NUMBER_OF_BUCKETS
LOI_24:41:void_sort(java.lang.Integer[],int,int,int):b => ~b
LOI_25:42:void_sort(java.lang.Integer[],int,int,int):b => ~b
LOI_26:43:void_sort(java.lang.Integer[],int,int,int):b => ~b
LOI_27:44:void_sort(java.lang.Integer[],int,int,int):origin => ~origin
LOI_28:45:void_sort(java.lang.Integer[],int,int,int):from => ~from
LOI_29:46:void_sort(java.lang.Integer[],int,int,int):from => ~from
LOI_30:48:void_sort(java.lang.Integer[],int,int,int):num => ~num
LOI_31:48:void_sort(java.lang.Integer[],int,int,int):divisor => ~divisor
LOI_32:49:void_sort(java.lang.Integer[],int,int,int):digit => ~digit
LOI_33:50:void_sort(java.lang.Integer[],int,int,int):digit => ~digit
LOI_34:51:void_sort(java.lang.Integer[],int,int,int):to => ~to
LOI_35:52:void_sort(java.lang.Integer[],int,int,int):to => ~to
LOI_36:52:void_sort(java.lang.Integer[],int,int,int):num => ~num
LOI_37:53:void_sort(java.lang.Integer[],int,int,int):temp => ~temp
LOI_38:54:void_sort(java.lang.Integer[],int,int,int):to => ~to
LOI_39:55:void_sort(java.lang.Integer[],int,int,int):from => ~from
LOI_40:55:void_sort(java.lang.Integer[],int,int,int):origin => ~origin
LOI_41:58:void_sort(java.lang.Integer[],int,int,int):divisor => ~divisor
LOI_42:59:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_43:59:void_sort(java.lang.Integer[],int,int,int):NUMBER_OF_BUCKETS => ~NUMBER_OF_BUCKETS
LOI_44:59:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_45:60:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_46:60:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_47:60:void_sort(java.lang.Integer[],int,int,int):start => ~start
LOI_48:61:void_sort(java.lang.Integer[],int,int,int):i => ~i
LOI_49:62:void_sort(java.lang.Integer[],int,int,int):end => ~end
LOI_50:62:void_sort(java.lang.Integer[],int,int,int):begin => ~begin
LOI_51:63:void_sort(java.lang.Integer[],int,int,int):begin => ~begin
LOI_52:63:void_sort(java.lang.Integer[],int,int,int):end => ~end
LOI_53:63:void_sort(java.lang.Integer[],int,int,int):divisor => ~divisor
SDL_6:62:void_sort(java.lang.Integer[],int,int,int): int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }  =>   int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }
SDL_7:66:void_sort(java.lang.Integer[],int,int,int): int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }  =>   int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }
SDL_8:64:void_sort(java.lang.Integer[],int,int,int): int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }  =>   int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }
SDL_9:50:void_sort(java.lang.Integer[],int,int,int): int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }  =>   int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }
SDL_10:58:void_sort(java.lang.Integer[],int,int,int): int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } } if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }  =>   int[] count = new int[NUMBER_OF_BUCKETS]; int[] offset = new int[NUMBER_OF_BUCKETS]; int digit = 0; for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; } offset[0] = start + 0; for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; } for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } }
SDL_11:35:void_sort(java.lang.Integer[],int,int,int): int d = unsorted[i]; digit = getDigit( d, divisor ); count[digit]++;  =>   int d = unsorted[i]; count[digit]++;
SDL_12:35:void_sort(java.lang.Integer[],int,int,int): int d = unsorted[i]; digit = getDigit( d, divisor ); count[digit]++;  =>   int d = unsorted[i]; digit = getDigit( d, divisor );
SDL_13:37:void_sort(java.lang.Integer[],int,int,int): for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; }  =>   for (int i = start;; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; }
SDL_14:37:void_sort(java.lang.Integer[],int,int,int): for (int i = start; i < length; i++) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; }  =>   for (int i = start; i < length;) {     int d = unsorted[i];     digit = getDigit( d, divisor );     count[digit]++; }
SDL_15:39:void_sort(java.lang.Integer[],int,int,int): offset[i] = count[i - 1] + offset[i - 1];  =>  
SDL_16:41:void_sort(java.lang.Integer[],int,int,int): for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; }  =>   for (int i = 1;; i++) {     offset[i] = count[i - 1] + offset[i - 1]; }
SDL_17:41:void_sort(java.lang.Integer[],int,int,int): for (int i = 1; i < NUMBER_OF_BUCKETS; i++) {     offset[i] = count[i - 1] + offset[i - 1]; }  =>   for (int i = 1; i < NUMBER_OF_BUCKETS;) {     offset[i] = count[i - 1] + offset[i - 1]; }
SDL_18:42:void_sort(java.lang.Integer[],int,int,int): while (count[b] > 0) {     int origin = offset[b];     int from = origin;     int num = unsorted[from];     unsorted[from] = -1;     do {         digit = getDigit( num, divisor );         int to = offset[digit]++;         count[digit]--;         int temp = unsorted[to];         unsorted[to] = num;         num = temp;         from = to;     } while (from != origin); }  =>  
SDL_19:58:void_sort(java.lang.Integer[],int,int,int): for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } }  =>   for (int b = 0;; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } }
SDL_20:58:void_sort(java.lang.Integer[],int,int,int): for (int b = 0; b < NUMBER_OF_BUCKETS; b++) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } }  =>   for (int b = 0; b < NUMBER_OF_BUCKETS;) {     while (count[b] > 0) {         int origin = offset[b];         int from = origin;         int num = unsorted[from];         unsorted[from] = -1;         do {             digit = getDigit( num, divisor );             int to = offset[digit]++;             count[digit]--;             int temp = unsorted[to];             unsorted[to] = num;             num = temp;             from = to;         } while (from != origin);     } }
SDL_21:55:void_sort(java.lang.Integer[],int,int,int): int origin = offset[b]; int from = origin; int num = unsorted[from]; unsorted[from] = -1; do {     digit = getDigit( num, divisor );     int to = offset[digit]++;     count[digit]--;     int temp = unsorted[to];     unsorted[to] = num;     num = temp;     from = to; } while (from != origin);  =>   int origin = offset[b]; int from = origin; int num = unsorted[from]; do {     digit = getDigit( num, divisor );     int to = offset[digit]++;     count[digit]--;     int temp = unsorted[to];     unsorted[to] = num;     num = temp;     from = to; } while (from != origin);
SDL_22:47:void_sort(java.lang.Integer[],int,int,int): int origin = offset[b]; int from = origin; int num = unsorted[from]; unsorted[from] = -1; do {     digit = getDigit( num, divisor );     int to = offset[digit]++;     count[digit]--;     int temp = unsorted[to];     unsorted[to] = num;     num = temp;     from = to; } while (from != origin);  =>   int origin = offset[b]; int from = origin; int num = unsorted[from]; unsorted[from] = -1;
SDL_23:57:void_sort(java.lang.Integer[],int,int,int): while (count[b] > 0) {     int origin = offset[b];     int from = origin;     int num = unsorted[from];     unsorted[from] = -1;     do {         digit = getDigit( num, divisor );         int to = offset[digit]++;         count[digit]--;         int temp = unsorted[to];         unsorted[to] = num;         num = temp;         from = to;     } while (from != origin); }  =>   while (true) {     int origin = offset[b];     int from = origin;     int num = unsorted[from];     unsorted[from] = -1;     do {         digit = getDigit( num, divisor );         int to = offset[digit]++;         count[digit]--;         int temp = unsorted[to];         unsorted[to] = num;         num = temp;         from = to;     } while (from != origin); }
SDL_24:59:void_sort(java.lang.Integer[],int,int,int): for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {     int begin = i > 0 ? offset[i - 1] : start;     int end = offset[i];     if (end - begin > 1) {         sort( unsorted, begin, end, divisor / 10 );     } }  =>  
SDL_25:67:void_sort(java.lang.Integer[],int,int,int): if (divisor > 1) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }  =>   if (true) {     for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {         int begin = i > 0 ? offset[i - 1] : start;         int end = offset[i];         if (end - begin > 1) {             sort( unsorted, begin, end, divisor / 10 );         }     } }
SDL_26:62:void_sort(java.lang.Integer[],int,int,int): int begin = i > 0 ? offset[i - 1] : start; int end = offset[i]; if (end - begin > 1) {     sort( unsorted, begin, end, divisor / 10 ); }  =>   int begin = i > 0 ? offset[i - 1] : start; int end = offset[i];
SDL_27:66:void_sort(java.lang.Integer[],int,int,int): for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {     int begin = i > 0 ? offset[i - 1] : start;     int end = offset[i];     if (end - begin > 1) {         sort( unsorted, begin, end, divisor / 10 );     } }  =>   for (int i = 0;; i++) {     int begin = i > 0 ? offset[i - 1] : start;     int end = offset[i];     if (end - begin > 1) {         sort( unsorted, begin, end, divisor / 10 );     } }
SDL_28:66:void_sort(java.lang.Integer[],int,int,int): for (int i = 0; i < NUMBER_OF_BUCKETS; i++) {     int begin = i > 0 ? offset[i - 1] : start;     int end = offset[i];     if (end - begin > 1) {         sort( unsorted, begin, end, divisor / 10 );     } }  =>   for (int i = 0; i < NUMBER_OF_BUCKETS;) {     int begin = i > 0 ? offset[i - 1] : start;     int end = offset[i];     if (end - begin > 1) {         sort( unsorted, begin, end, divisor / 10 );     } }
SDL_29:63:void_sort(java.lang.Integer[],int,int,int): sort( unsorted, begin, end, divisor / 10 );  =>  
SDL_30:65:void_sort(java.lang.Integer[],int,int,int): if (end - begin > 1) {     sort( unsorted, begin, end, divisor / 10 ); }  =>   if (true) {     sort( unsorted, begin, end, divisor / 10 ); }
VDL_4:32:void_sort(java.lang.Integer[],int,int,int):i < length => length
VDL_5:32:void_sort(java.lang.Integer[],int,int,int):i < length => i
VDL_6:32:void_sort(java.lang.Integer[],int,int,int):i++ =>  
VDL_7:35:void_sort(java.lang.Integer[],int,int,int):count[digit]++ =>  
VDL_8:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => 0
VDL_9:38:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS
VDL_10:38:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => i
VDL_11:38:void_sort(java.lang.Integer[],int,int,int):i++ =>  
VDL_12:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => 1
VDL_13:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => 1
VDL_14:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => offset[i - 1]
VDL_15:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => count[i - 1]
VDL_16:41:void_sort(java.lang.Integer[],int,int,int):b < NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS
VDL_17:41:void_sort(java.lang.Integer[],int,int,int):b < NUMBER_OF_BUCKETS => b
VDL_18:41:void_sort(java.lang.Integer[],int,int,int):b++ =>  
VDL_19:42:void_sort(java.lang.Integer[],int,int,int):count[b] > 0 => 0
VDL_20:49:void_sort(java.lang.Integer[],int,int,int):offset[digit]++ =>  
VDL_21:50:void_sort(java.lang.Integer[],int,int,int):count[digit]-- =>  
VDL_22:55:void_sort(java.lang.Integer[],int,int,int):from != origin => origin
VDL_23:55:void_sort(java.lang.Integer[],int,int,int):from != origin => from
VDL_24:58:void_sort(java.lang.Integer[],int,int,int):divisor > 1 => 1
VDL_25:59:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS
VDL_26:59:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => i
VDL_27:59:void_sort(java.lang.Integer[],int,int,int):i++ =>  
VDL_28:60:void_sort(java.lang.Integer[],int,int,int):i > 0 => 0
VDL_29:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => 1
VDL_30:62:void_sort(java.lang.Integer[],int,int,int):end - begin => begin
VDL_31:62:void_sort(java.lang.Integer[],int,int,int):end - begin => end
VDL_32:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => 10
ODL_7:32:void_sort(java.lang.Integer[],int,int,int):i < length => i
ODL_8:32:void_sort(java.lang.Integer[],int,int,int):i < length => length
ODL_9:32:void_sort(java.lang.Integer[],int,int,int):i++ => i
ODL_10:35:void_sort(java.lang.Integer[],int,int,int):count[digit]++ => count[digit]
ODL_11:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => start
ODL_12:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => 0
ODL_13:38:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => i
ODL_14:38:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS
ODL_15:38:void_sort(java.lang.Integer[],int,int,int):i++ => i
ODL_16:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i
ODL_17:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => 1
ODL_18:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i
ODL_19:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => 1
ODL_20:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => count[i - 1]
ODL_21:39:void_sort(java.lang.Integer[],int,int,int):count[i - 1] + offset[i - 1] => offset[i - 1]
ODL_22:41:void_sort(java.lang.Integer[],int,int,int):b < NUMBER_OF_BUCKETS => b
ODL_23:41:void_sort(java.lang.Integer[],int,int,int):b < NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS
ODL_24:41:void_sort(java.lang.Integer[],int,int,int):b++ => b
ODL_25:42:void_sort(java.lang.Integer[],int,int,int):count[b] > 0 => count[b]
ODL_26:42:void_sort(java.lang.Integer[],int,int,int):count[b] > 0 => 0
ODL_27:46:void_sort(java.lang.Integer[],int,int,int):-1 => 1
ODL_28:49:void_sort(java.lang.Integer[],int,int,int):offset[digit]++ => offset[digit]
ODL_29:50:void_sort(java.lang.Integer[],int,int,int):count[digit]-- => count[digit]
ODL_30:55:void_sort(java.lang.Integer[],int,int,int):from != origin => from
ODL_31:55:void_sort(java.lang.Integer[],int,int,int):from != origin => origin
ODL_32:58:void_sort(java.lang.Integer[],int,int,int):divisor > 1 => divisor
ODL_33:58:void_sort(java.lang.Integer[],int,int,int):divisor > 1 => 1
ODL_34:59:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => i
ODL_35:59:void_sort(java.lang.Integer[],int,int,int):i < NUMBER_OF_BUCKETS => NUMBER_OF_BUCKETS
ODL_36:59:void_sort(java.lang.Integer[],int,int,int):i++ => i
ODL_37:60:void_sort(java.lang.Integer[],int,int,int):i > 0 => i
ODL_38:60:void_sort(java.lang.Integer[],int,int,int):i > 0 => 0
ODL_39:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => i
ODL_40:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => 1
ODL_41:62:void_sort(java.lang.Integer[],int,int,int):end - begin => end
ODL_42:62:void_sort(java.lang.Integer[],int,int,int):end - begin => begin
ODL_43:62:void_sort(java.lang.Integer[],int,int,int):end - begin > 1 => end - begin
ODL_44:62:void_sort(java.lang.Integer[],int,int,int):end - begin > 1 => 1
ODL_45:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => divisor
ODL_46:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => 10
CDL_2:37:void_sort(java.lang.Integer[],int,int,int):start + 0 => start
CDL_3:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i
CDL_4:39:void_sort(java.lang.Integer[],int,int,int):i - 1 => i
CDL_5:42:void_sort(java.lang.Integer[],int,int,int):count[b] > 0 => count[b]
CDL_6:46:void_sort(java.lang.Integer[],int,int,int):-1 =>  
CDL_7:58:void_sort(java.lang.Integer[],int,int,int):divisor > 1 => divisor
CDL_8:60:void_sort(java.lang.Integer[],int,int,int):i > 0 => i
CDL_9:60:void_sort(java.lang.Integer[],int,int,int):i - 1 => i
CDL_10:62:void_sort(java.lang.Integer[],int,int,int):end - begin > 1 => end - begin
CDL_11:63:void_sort(java.lang.Integer[],int,int,int):divisor / 10 => divisor
